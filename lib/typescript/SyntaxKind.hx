package typescript;

@:jsRequire("typescript", "SyntaxKind") @:enum extern abstract SyntaxKind(Int) from Int to Int {
	var Unknown;
	var EndOfFileToken;
	var SingleLineCommentTrivia;
	var MultiLineCommentTrivia;
	var NewLineTrivia;
	var WhitespaceTrivia;
	var ShebangTrivia;
	var ConflictMarkerTrivia;
	var NumericLiteral;
	var BigIntLiteral;
	var StringLiteral;
	var JsxText;
	var JsxTextAllWhiteSpaces;
	var RegularExpressionLiteral;
	var NoSubstitutionTemplateLiteral;
	var TemplateHead;
	var TemplateMiddle;
	var TemplateTail;
	var OpenBraceToken;
	var CloseBraceToken;
	var OpenParenToken;
	var CloseParenToken;
	var OpenBracketToken;
	var CloseBracketToken;
	var DotToken;
	var DotDotDotToken;
	var SemicolonToken;
	var CommaToken;
	var QuestionDotToken;
	var LessThanToken;
	var LessThanSlashToken;
	var GreaterThanToken;
	var LessThanEqualsToken;
	var GreaterThanEqualsToken;
	var EqualsEqualsToken;
	var ExclamationEqualsToken;
	var EqualsEqualsEqualsToken;
	var ExclamationEqualsEqualsToken;
	var EqualsGreaterThanToken;
	var PlusToken;
	var MinusToken;
	var AsteriskToken;
	var AsteriskAsteriskToken;
	var SlashToken;
	var PercentToken;
	var PlusPlusToken;
	var MinusMinusToken;
	var LessThanLessThanToken;
	var GreaterThanGreaterThanToken;
	var GreaterThanGreaterThanGreaterThanToken;
	var AmpersandToken;
	var BarToken;
	var CaretToken;
	var ExclamationToken;
	var TildeToken;
	var AmpersandAmpersandToken;
	var BarBarToken;
	var QuestionToken;
	var ColonToken;
	var AtToken;
	var QuestionQuestionToken;
	/**
		Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds.
	**/
	var BacktickToken;
	var EqualsToken;
	var PlusEqualsToken;
	var MinusEqualsToken;
	var AsteriskEqualsToken;
	var AsteriskAsteriskEqualsToken;
	var SlashEqualsToken;
	var PercentEqualsToken;
	var LessThanLessThanEqualsToken;
	var GreaterThanGreaterThanEqualsToken;
	var GreaterThanGreaterThanGreaterThanEqualsToken;
	var AmpersandEqualsToken;
	var BarEqualsToken;
	var BarBarEqualsToken;
	var AmpersandAmpersandEqualsToken;
	var QuestionQuestionEqualsToken;
	var CaretEqualsToken;
	var Identifier;
	var PrivateIdentifier;
	var BreakKeyword;
	var CaseKeyword;
	var CatchKeyword;
	var ClassKeyword;
	var ConstKeyword;
	var ContinueKeyword;
	var DebuggerKeyword;
	var DefaultKeyword;
	var DeleteKeyword;
	var DoKeyword;
	var ElseKeyword;
	var EnumKeyword;
	var ExportKeyword;
	var ExtendsKeyword;
	var FalseKeyword;
	var FinallyKeyword;
	var ForKeyword;
	var FunctionKeyword;
	var IfKeyword;
	var ImportKeyword;
	var InKeyword;
	var InstanceOfKeyword;
	var NewKeyword;
	var NullKeyword;
	var ReturnKeyword;
	var SuperKeyword;
	var SwitchKeyword;
	var ThisKeyword;
	var ThrowKeyword;
	var TrueKeyword;
	var TryKeyword;
	var TypeOfKeyword;
	var VarKeyword;
	var VoidKeyword;
	var WhileKeyword;
	var WithKeyword;
	var ImplementsKeyword;
	var InterfaceKeyword;
	var LetKeyword;
	var PackageKeyword;
	var PrivateKeyword;
	var ProtectedKeyword;
	var PublicKeyword;
	var StaticKeyword;
	var YieldKeyword;
	var AbstractKeyword;
	var AsKeyword;
	var AssertsKeyword;
	var AnyKeyword;
	var AsyncKeyword;
	var AwaitKeyword;
	var BooleanKeyword;
	var ConstructorKeyword;
	var DeclareKeyword;
	var GetKeyword;
	var InferKeyword;
	var IntrinsicKeyword;
	var IsKeyword;
	var KeyOfKeyword;
	var ModuleKeyword;
	var NamespaceKeyword;
	var NeverKeyword;
	var ReadonlyKeyword;
	var RequireKeyword;
	var NumberKeyword;
	var ObjectKeyword;
	var SetKeyword;
	var StringKeyword;
	var SymbolKeyword;
	var TypeKeyword;
	var UndefinedKeyword;
	var UniqueKeyword;
	var UnknownKeyword;
	var FromKeyword;
	var GlobalKeyword;
	var BigIntKeyword;
	var OfKeyword;
	var QualifiedName;
	var ComputedPropertyName;
	var TypeParameter;
	var Parameter;
	var Decorator;
	var PropertySignature;
	var PropertyDeclaration;
	var MethodSignature;
	var MethodDeclaration;
	var Constructor;
	var GetAccessor;
	var SetAccessor;
	var CallSignature;
	var ConstructSignature;
	var IndexSignature;
	var TypePredicate;
	var TypeReference;
	var FunctionType;
	var ConstructorType;
	var TypeQuery;
	var TypeLiteral;
	var ArrayType;
	var TupleType;
	var OptionalType;
	var RestType;
	var UnionType;
	var IntersectionType;
	var ConditionalType;
	var InferType;
	var ParenthesizedType;
	var ThisType;
	var TypeOperator;
	var IndexedAccessType;
	var MappedType;
	var LiteralType;
	var NamedTupleMember;
	var TemplateLiteralType;
	var TemplateLiteralTypeSpan;
	var ImportType;
	var ObjectBindingPattern;
	var ArrayBindingPattern;
	var BindingElement;
	var ArrayLiteralExpression;
	var ObjectLiteralExpression;
	var PropertyAccessExpression;
	var ElementAccessExpression;
	var CallExpression;
	var NewExpression;
	var TaggedTemplateExpression;
	var TypeAssertionExpression;
	var ParenthesizedExpression;
	var FunctionExpression;
	var ArrowFunction;
	var DeleteExpression;
	var TypeOfExpression;
	var VoidExpression;
	var AwaitExpression;
	var PrefixUnaryExpression;
	var PostfixUnaryExpression;
	var BinaryExpression;
	var ConditionalExpression;
	var TemplateExpression;
	var YieldExpression;
	var SpreadElement;
	var ClassExpression;
	var OmittedExpression;
	var ExpressionWithTypeArguments;
	var AsExpression;
	var NonNullExpression;
	var MetaProperty;
	var SyntheticExpression;
	var TemplateSpan;
	var SemicolonClassElement;
	var Block;
	var EmptyStatement;
	var VariableStatement;
	var ExpressionStatement;
	var IfStatement;
	var DoStatement;
	var WhileStatement;
	var ForStatement;
	var ForInStatement;
	var ForOfStatement;
	var ContinueStatement;
	var BreakStatement;
	var ReturnStatement;
	var WithStatement;
	var SwitchStatement;
	var LabeledStatement;
	var ThrowStatement;
	var TryStatement;
	var DebuggerStatement;
	var VariableDeclaration;
	var VariableDeclarationList;
	var FunctionDeclaration;
	var ClassDeclaration;
	var InterfaceDeclaration;
	var TypeAliasDeclaration;
	var EnumDeclaration;
	var ModuleDeclaration;
	var ModuleBlock;
	var CaseBlock;
	var NamespaceExportDeclaration;
	var ImportEqualsDeclaration;
	var ImportDeclaration;
	var ImportClause;
	var NamespaceImport;
	var NamedImports;
	var ImportSpecifier;
	var ExportAssignment;
	var ExportDeclaration;
	var NamedExports;
	var NamespaceExport;
	var ExportSpecifier;
	var MissingDeclaration;
	var ExternalModuleReference;
	var JsxElement;
	var JsxSelfClosingElement;
	var JsxOpeningElement;
	var JsxClosingElement;
	var JsxFragment;
	var JsxOpeningFragment;
	var JsxClosingFragment;
	var JsxAttribute;
	var JsxAttributes;
	var JsxSpreadAttribute;
	var JsxExpression;
	var CaseClause;
	var DefaultClause;
	var HeritageClause;
	var CatchClause;
	var PropertyAssignment;
	var ShorthandPropertyAssignment;
	var SpreadAssignment;
	var EnumMember;
	var UnparsedPrologue;
	var UnparsedPrepend;
	var UnparsedText;
	var UnparsedInternalText;
	var UnparsedSyntheticReference;
	var SourceFile;
	var Bundle;
	var UnparsedSource;
	var InputFiles;
	var JSDocTypeExpression;
	var JSDocNameReference;
	var JSDocAllType;
	var JSDocUnknownType;
	var JSDocNullableType;
	var JSDocNonNullableType;
	var JSDocOptionalType;
	var JSDocFunctionType;
	var JSDocVariadicType;
	var JSDocNamepathType;
	var JSDocComment;
	var JSDocTypeLiteral;
	var JSDocSignature;
	var JSDocTag;
	var JSDocAugmentsTag;
	var JSDocImplementsTag;
	var JSDocAuthorTag;
	var JSDocDeprecatedTag;
	var JSDocClassTag;
	var JSDocPublicTag;
	var JSDocPrivateTag;
	var JSDocProtectedTag;
	var JSDocReadonlyTag;
	var JSDocCallbackTag;
	var JSDocEnumTag;
	var JSDocParameterTag;
	var JSDocReturnTag;
	var JSDocThisTag;
	var JSDocTypeTag;
	var JSDocTemplateTag;
	var JSDocTypedefTag;
	var JSDocSeeTag;
	var JSDocPropertyTag;
	var SyntaxList;
	var NotEmittedStatement;
	var PartiallyEmittedExpression;
	var CommaListExpression;
	var MergeDeclarationMarker;
	var EndOfDeclarationMarker;
	var SyntheticReferenceExpression;
	var Count;
	var FirstAssignment;
	var LastAssignment;
	var FirstCompoundAssignment;
	var LastCompoundAssignment;
	var FirstReservedWord;
	var LastReservedWord;
	var FirstKeyword;
	var LastKeyword;
	var FirstFutureReservedWord;
	var LastFutureReservedWord;
	var FirstTypeNode;
	var LastTypeNode;
	var FirstPunctuation;
	var LastPunctuation;
	var FirstToken;
	var LastToken;
	var FirstTriviaToken;
	var LastTriviaToken;
	var FirstLiteralToken;
	var LastLiteralToken;
	var FirstTemplateToken;
	var LastTemplateToken;
	var FirstBinaryOperator;
	var LastBinaryOperator;
	var FirstStatement;
	var LastStatement;
	var FirstNode;
	var FirstJSDocNode;
	var LastJSDocNode;
	var FirstJSDocTagNode;
	var LastJSDocTagNode;
}